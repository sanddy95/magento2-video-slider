<?php

/**
 * PHP version 7.1
 *
 * @category  Techeniac
 * @package   Techeniac\VideoSlider\Controller\Adminhtml\Slider
 * @author    Techeniac <buzz@techeniac.com>
 * @copyright 2019 This file was generated by Techeniac
 * @license   http://www.techeniac.com Open Software License (OSL 3.0)
 * @link      http://www.techeniac.com
 */

namespace Techeniac\VideoSlider\Controller\Adminhtml\Slider;

use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\View\Result\PageFactory;
use Magento\TestFramework\ErrorLog\Logger;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\MediaStorage\Model\File\UploaderFactory;
use Magento\Framework\Image\AdapterFactory;
use Magento\Framework\Filesystem;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\App\Request\DataPersistorInterface;
use Magento\Backend\Model\Session;
use Techeniac\VideoSlider\Model\Slider;

/**
 * PHP version 7.1
 *
 * @category  Techeniac
 * @package   Techeniac\VideoSlider\Controller\Adminhtml\Slider
 * @author    Techeniac <buzz@techeniac.com>
 * @copyright 2019 This file was generated by Techeniac
 * @license   http://www.techeniac.com Open Software License (OSL 3.0)
 * @link      http://www.techeniac.com
 */
class Save extends Action
{
    /**
     * Uploadfactory
     *
     * @var \Magento\MediaStorage\Model\File\UploaderFactory
     */
    private $uploaderFactory;

    /**
     * AdapterFactory
     *
     * @var \Magento\Framework\Image\AdapterFactory
     */
    private $adapterFactory;

    /**
     * Filesystem
     *
     * @var \Magento\Framework\Filesystem
     */
    private $filesystem;

    /**
     * @var PageFactory
     */
    private $resultPageFactory;

    /**
     * @var Model
     */
    private $model;

    /**
     * @var Model
     */
    private $session;

    /**
     * @param Context $context
     * @param PageFactory $resultPageFactory
     */
    public function __construct(
        Context $context,
        PageFactory $resultPageFactory,
        UploaderFactory $uploaderFactory,
        AdapterFactory $adapterFactory,
        Slider $model,
        Session $session,
        Filesystem $filesystem
    ) {
        parent::__construct($context);
        $this->resultPageFactory = $resultPageFactory;
        $this->uploaderFactory = $uploaderFactory;
        $this->adapterFactory = $adapterFactory;
        $this->model = $model;
        $this->session = $session;
        $this->filesystem = $filesystem;
    }

    /**
     * Check the permission to run it
     *
     * @return boolean
     */
    public function _isAllowed()
    {
        return $this->_authorization->isAllowed('Techeniac_VideoSlider::save');
    }

    /**
     * Index action
     *
     * @return \Magento\Backend\Model\View\Result\Page
     */
    public function execute()
    {
        $result = false;
        $data = $this->getRequest()->getPostValue();
        /**
         * ResuleRedirect
         *
         * @var \Magento\Backend\Model\View\Result\Redirect $resultRedirect
         */

        $resultRedirect = $this->resultRedirectFactory->create();
        if (!$this->_validatedParams($data)) {

            /**
             * Video Model
             *
             * @var \Etatvasoft\videoGallery\Model\Video $model
             */

            $model = $this->model;

            $id = $this->getRequest()->getParam('id');

            if ($id) {
                $model->load($id);
            }

            if ($data['Video_Upload_Method'] == 'youtube') {
                //Delete VIdeo at edit time
                if ($id && ($this->getRequest()->getParam('old_video'))) {
                    $old_video = $this->getRequest()->getParam('old_video');
                    $mediaDirectory = $this->filesystem->getDirectoryRead(DirectoryList::MEDIA);
                    $destinationPath = $mediaDirectory->getAbsolutePath('/videoslider/');
                    unlink($destinationPath.$old_video);
                }

                $model->setData('file', $data['youtube']);
            } else {
                if ($id) {
                    $old_video = $this->getRequest()->getParam('old_video');
                    if ($this->getRequest()->getFiles('From_PC')['name'] != '') {
                        $files = $this->getRequest()->getFiles('From_PC');
                        if (isset($files['name']) && $files['name'] != '') {
                            $result = $this->imgUpload($files);
                            if ($result[0]) {
                                //Delete VIdeo at edit time
                                if ($id) {
                                    $old_video = $this->getRequest()->getParam('old_video');
                                    $mediaDirectory = $this->filesystem->getDirectoryRead(DirectoryList::MEDIA);
                                    $destinationPath = $mediaDirectory->getAbsolutePath('/videoslider/');
                                    unlink($destinationPath.$old_video);
                                }
                                $model->setData('file', $result[1]);
                            }
                        } else {
                            $this->messageManager->addErrorMessage(__('Only mp4 files allowed.'));
                        }
                    } else {
                        $model->setData('file', $old_video);
                    }
                } else {
                    $old_video = null;
                    $files = $this->getRequest()->getFiles('From_PC');
                    if (isset($files['name']) && $files['name'] != '') {
                        $result = $this->imgUpload($files);
                        if ($result[0]) {
                            $model->setData('file', $result[1]);
                        }
                    } else {
                        $this->messageManager->addErrorMessage(__('Only mp4 files allowed.'));
                    }
                }
            }

            $model->setData('title', $data['title']);
            $model->setData('content_on_slider', $data['content_on_slider']);
            $model->setData('position', $data['position']);
            $model->setData('is_active', $data['is_active']);
            $model->setData('video_upload_method', $data['Video_Upload_Method']);

            $this->_eventManager->dispatch(
                'videoslider_slider_prepare_save',
                ['post' => $model, 'request' => $this->getRequest()]
            );

            if ($data['Video_Upload_Method'] == 'youtube' || $result == true || $old_video != '') {
                try {
                    $model->save();
                    $this->messageManager->addSuccess(__('Video Details are saved successfully.'));
                    $this->session->setFormData(false);
                    if ($this->getRequest()->getParam('back')) {
                        return $resultRedirect->setPath('*/*/edit', ['id' => $model->getId(), '_current' => true]);
                    }
                    return $resultRedirect->setPath('*/*/');
                } catch (\Magento\Framework\Exception\LocalizedException $e) {
                    $this->messageManager->addError($e->getMessage());
                } catch (\RuntimeException $e) {
                    $this->messageManager->addError($e->getMessage());
                } catch (\Exception $e) {
                    $this->messageManager->addException($e, __('Something went wrong while saving the post.'));
                }
            }
        } else {
            $this->messageManager->addError(__(implode("<br>", $this->_validatedParams($data))));
        }
        $this->_getSession()->setFormData($data);
        return $resultRedirect->setPath('*/*/edit', ['id' => $this->getRequest()->getParam('id')]);
    }

    /**
     * Upload Video File
     *
     * @return boolean
     */
    public function imgUpload()
    {

        $files = $this->getRequest()->getFiles('From_PC');

        if ($files['name']) {
            try {
                if ($files['size'] > 0) {
                    $uploaderFactory = $this->uploaderFactory->create(['fileId' => 'From_PC']);
                    $uploaderFactory->setAllowedExtensions(['mp4']);
                    if ($uploaderFactory->getFileExtension() != 'mp4') {
                        $this->messageManager->addErrorMessage(__('Only mp4 files allowed.'));
                        return false;
                    }
                    $imageAdapter = $this->adapterFactory->create();
                    $uploaderFactory->setAllowRenameFiles(true);
                    $mediaDirectory = $this->filesystem->getDirectoryRead(DirectoryList::MEDIA);
                    $destinationPath = $mediaDirectory->getAbsolutePath('/videoslider/');
                    $uploaderFactory = $uploaderFactory->save($destinationPath);
                } else {
                    $this->messageManager->addErrorMessage(__('The file size should not exceed '.ini_get('upload_max_filesize').'.'));
                    return false;
                }

                if (!$uploaderFactory) {
                    throw new \LocalizedException(
                        __('File cannot be saved to path: $1', $destinationPath)
                    );
                } else {
                    return [true,$uploaderFactory['file']];
                }
            } catch (\Exception $e) {
                $this->messageManager->addError(__($e->getMessage()));
                return false;
            }
        }
    }

    /**
     * Check Validation
     *
     * @param data $data parameter data
     *
     * @return $errors
     */
    private function _validatedParams($data)
    {

        $errors = [];

        if (!isset($data['Video_Upload_Method']) || !\Zend_Validate::is($data['Video_Upload_Method'], 'NotEmpty')) {
            $errors[] = __('%fieldName is a required field.', ['fieldName' => 'Video Upload Method']);
        } else {
            if ($data['Video_Upload_Method'] == 'youtube') {
                if (!isset($data['youtube']) || !\Zend_Validate::is($data['youtube'], 'NotEmpty')) {
                    $errors[] = __('%fieldName is a required field.', ['fieldName' => 'Youtube Method']);
                }
            }
        }

        if (!isset($data['position']) || !\Zend_Validate::is($data['position'], 'NotEmpty')) {
            $errors[] = __('%fieldName is a required field.', ['fieldName' => 'position']);
        }

        if (!isset($data['position']) || !\Zend_Validate::is($data['position'], 'Digits')) {
            $errors[] = __('%fieldName only accept digits.', ['fieldName' => 'position']);
        }

        if (empty($errors)) {
            return false;
        }

        return $errors;
    }
}
